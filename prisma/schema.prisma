// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// code above unchanged
model User {
  id            String    @id @default(cuid())
  createdAt     DateTime  @default(now())

  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  pins          Pin[]
  comments      Comment[]
  saved         Saved[]
  board         Board[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Pin {
  id          String             @id @default(uuid())
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  title       String
  media       String
  description String?
  categories  Category[]
  userId      String
  user        User               @relation(fields: [userId], references: [id])
  comments    Comment[]
  saved       Saved[]
}

model Saved {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  pinId     String
  pin       Pin      @relation(fields: [pinId], references: [id], onDelete: Cascade)
  board     Board    @relation(fields: [boardId], references: [id])
  boardId   String

  @@unique([userId, pinId, boardId])
}

model Comment {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  content   String
  pinId     String
  pin       Pin      @relation(fields: [pinId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id])
}

model Board {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  saved     Saved[]
  secret    Boolean

  @@unique([userId, name])
}

model Category {
  id   String             @id @default(uuid())
  name String             @unique
  pins Pin[]
}

// model CategoriesOnPins {
//   pinId      String
//   pin        Pin      @relation(fields: [pinId], references: [id])
//   category   Category @relation(fields: [categoryId], references: [id])
//   categoryId String

//   @@id([pinId, categoryId])
// }

enum Role {
  USER
  ADMIN
}
